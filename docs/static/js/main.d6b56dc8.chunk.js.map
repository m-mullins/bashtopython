{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pythonTemplate","bashScript","concat","SLEEP","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convertScript","setState","pythonScript","state","converted","setTimeout","convertMore","downloadPyFile","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","_this2","react_default","a","Typography_default","variant","gutterBottom","style","display","Button_default","margin","color","onClick","bind","CircularProgress_default","backgroundColor","maxHeight","overflow","height","marginBottom","lib_default","value","onValueChange","highlight","code","Prism","languages","bash","padding","fontFamily","fontSize","width","placeholder","textareaId","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6b56dc8.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\nimport Editor from 'react-simple-code-editor';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-python';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst pythonTemplate = (bashScript) =>  \n`#!/usr/bin/python\nfrom __future__ import print_function\nimport subprocess\nimport sys\n\ndef main():\n    p = subprocess.Popen(['bash'],\n                stdout=subprocess.PIPE,\n                stdin=subprocess.PIPE,\n                stderr=subprocess.PIPE)\n\n    out, err = p.communicate(input=inputString)\n\n    print(out.decode('utf-8'), end='')\n    print(err.decode('utf-8'), file=sys.stderr, end='')\n\n\ninputString = b\"\"\"\n${bashScript}\n\"\"\"\n\n\nif __name__ == '__main__':\n    main()\n`;\n\nconst SLEEP = 12000;\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      converted: 0,\n      bashScript: '',\n      pythonScript: '',\n    }\n  }\n\n  convertScript = () => {\n    this.setState({\n      pythonScript: pythonTemplate(this.state.bashScript),\n      converted: 1\n    });\n    setTimeout(() => this.setState({converted: 2}), SLEEP);\n  };\n\n  convertMore = () => {\n    this.setState({\n      converted: 0,\n      bashScript: ''\n    });\n  };\n  \n  downloadPyFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.pythonScript], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"script.py\";\n    document.body.appendChild(element); \n    element.click();\n  };\n\n  render() {\n    switch (this.state.converted) {\n      case 2:\n        return <div>\n          <Typography variant=\"h4\" gutterBottom>Bash to Python</Typography>\n\n          <div style={{ display: 'flex' }}>\n            <Button style={{margin: 6}} variant=\"contained\" color=\"primary\" onClick={this.downloadPyFile.bind(this)}>Download Python</Button>\n            <Button style={{margin: 6}} variant=\"contained\" onClick={this.convertMore.bind(this)}>Convert More</Button>\n          </div>\n        </div>;\n      case 1:\n        return <div>\n            <Typography variant=\"h4\" gutterBottom>Bash to Python</Typography>\n            <CircularProgress />\n          </div>;\n      case 0:\n        return <div>\n          <Typography variant=\"h4\" gutterBottom>Bash to Python</Typography>\n          <div style={{\n            backgroundColor: '#eee',\n            maxHeight: 450,\n            overflow: 'auto',\n            height: 450,\n            marginBottom: '0.92em'\n          }}>\n            <Editor\n              value={this.state.bashScript}\n              onValueChange={bashScript => this.setState({ bashScript })}\n              highlight={code => Prism.highlight(code, Prism.languages.bash, 'bash')}\n              padding={10}\n              style={{\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                fontSize: 12,\n                height: '100%',\n                width: '100%'\n              }}\n              placeholder=\"Enter bash script..\"\n              textareaId=\"bashText\"\n            />\n          </div>\n          <Button variant=\"contained\" color=\"primary\" disabled={!this.state.bashScript} onClick={this.convertScript.bind(this)}>Convert</Button>\n        </div>\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}